"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[46989],{99081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const o=n.p+"assets/images/record-processing-schema-diff-af21fc546b56e10b02672100b10127d3.png",i={},s="Record processing",l={unversionedId:"connector-development/connector-builder-ui/record-processing",id:"connector-development/connector-builder-ui/record-processing",title:"Record processing",description:"Connectors built with the connector builder always make HTTP requests, receive the responses and emit records. Besides making the right requests, it's important to properly hand over the records to the system:",source:"@site/../docs/connector-development/connector-builder-ui/record-processing.mdx",sourceDirName:"connector-development/connector-builder-ui",slug:"/connector-development/connector-builder-ui/record-processing",permalink:"/connector-development/connector-builder-ui/record-processing",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/connector-builder-ui/record-processing.mdx",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Authentication",permalink:"/connector-development/connector-builder-ui/authentication"},next:{title:"Pagination",permalink:"/connector-development/connector-builder-ui/pagination"}},c={},d=[{value:"Record selection",id:"record-selection",level:2},{value:"Nested objects",id:"nested-objects",level:3},{value:"Root array",id:"root-array",level:3},{value:"Single object",id:"single-object",level:3},{value:"Fields nested in arrays",id:"fields-nested-in-arrays",level:3},{value:"Transformations",id:"transformations",level:2},{value:"Removing fields",id:"removing-fields",level:3},{value:"Removing fields that match a glob pattern",id:"removing-fields-that-match-a-glob-pattern",level:3},{value:"Adding fields",id:"adding-fields",level:3},{value:"Meta data",id:"meta-data",level:2},{value:"Primary key",id:"primary-key",level:3},{value:"Declared schema",id:"declared-schema",level:3}],h={toc:d},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"record-processing"},"Record processing"),(0,r.kt)("p",null,"Connectors built with the connector builder always make HTTP requests, receive the responses and emit records. Besides making the right requests, it's important to properly hand over the records to the system:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Extract the records (record selection)"),(0,r.kt)("li",{parentName:"ul"},"Do optional post-processing (transformations)"),(0,r.kt)("li",{parentName:"ul"},"Provide record meta data to the system to inform downstream processes (primary key and declared schema)")),(0,r.kt)("h2",{id:"record-selection"},"Record selection"),(0,r.kt)("iframe",{width:"640",height:"393",src:"https://www.loom.com/embed/06d0fe35d79b40c5b1aea29a7fa7f113",frameborder:"0",webkitallowfullscreen:!0,mozallowfullscreen:!0,allowfullscreen:!0}),(0,r.kt)("p",null,'When doing HTTP requests, the connector expects the records to be part of the response JSON body. The "Record selector" field of the stream needs to be set to the property of the response object that holds the records.'),(0,r.kt)("p",null,"Very often, the response body contains an array of records along with some suplementary information (for example meta data for pagination)."),(0,r.kt)("p",null,"For example the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.nytimes.com/docs/most-popular-product/1/overview"},'"Most popular" NY Times API')," returns the following response body:"),(0,r.kt)("pre",null,'{\n    "status": "OK",\n    "copyright": "Copyright (c) 2023 The New York Times Company.  All Rights Reserved.",\n    "num_results": 20,\n    ',(0,r.kt)("b",null,'"results": ['),'\n      {\n        "uri": "nyt://article/c15e5227-ed68-54d9-9e5b-acf5a451ec37",\n        "url": "https://www.nytimes.com/2023/04/16/us/science-of-reading-literacy-parents.html",\n        "id": 100000008811231,\n        "asset_id": 100000008811231,\n        "source": "New York Times",\n        // ...\n      },\n      // ..\n    ',(0,r.kt)("b",null,"]"),",\n    // ...\n}"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Setting the record selector to ",(0,r.kt)("inlineCode",{parentName:"strong"},"results"))," selects the array with the actual records, everything else is discarded."),(0,r.kt)("h3",{id:"nested-objects"},"Nested objects"),(0,r.kt)("p",null,"In some cases the array of actual records is nested multiple levels deep in the response, like for the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.nytimes.com/docs/archive-product/1/overview"},'"Archive" NY Times API'),":"),(0,r.kt)("pre",null,'{\n    "copyright": "Copyright (c) 2020 The New York Times Company. All Rights Reserved.",\n    "response": {\n      ',(0,r.kt)("b",null,'"docs": ['),'\n        {\n          "abstract": "From the Treaty of Versailles to Prohibition, the events of that year shaped America, and the world, for a century to come. ",\n          "web_url": "https://www.nytimes.com/2018/12/31/opinion/1919-america.html",\n          "snippet": "From the Treaty of Versailles to Prohibition, the events of that year shaped America, and the world, for a century to come. ",\n          // ...\n        },\n        // ...\n      ',(0,r.kt)("b",null,"]"),"\n    }\n}"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},'Setting the record selector needs to be set to "',(0,r.kt)("inlineCode",{parentName:"strong"},"response"),",",(0,r.kt)("inlineCode",{parentName:"strong"},"docs"),'"')," selects the nested array."),(0,r.kt)("h3",{id:"root-array"},"Root array"),(0,r.kt)("p",null,"In some cases, the response body itself is an array of records, like in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.coinapi.io/market-data/rest-api/quotes"},"CoinAPI API"),":"),(0,r.kt)("pre",null,(0,r.kt)("b",null,"["),'\n  {\n    "symbol_id": "BITSTAMP_SPOT_BTC_USD",\n    "time_exchange": "2013-09-28T22:40:50.0000000Z",\n    "time_coinapi": "2017-03-18T22:42:21.3763342Z",\n    // ...\n  },\n  {\n    "symbol_id": "BITSTAMP_SPOT_BTC_USD",\n    "time_exchange": "2013-09-28T22:40:50.0000000Z",\n    "time_coinapi": "2017-03-18T22:42:21.3763342Z",\n   // ..\n  }\n  // ...\n',(0,r.kt)("b",null,"]")),(0,r.kt)("p",null,"In this case, ",(0,r.kt)("strong",{parentName:"p"},"the record selector can be omitted")," and the whole response becomes the list of records."),(0,r.kt)("h3",{id:"single-object"},"Single object"),(0,r.kt)("p",null,"Sometimes, there is only one record returned per request from the API. In this case, the record selector can also point to an object instead of an array which will be handled as the only record, like in the case of the ",(0,r.kt)("a",{parentName:"p",href:"https://exchangeratesapi.io/documentation/#historicalrates"},"Exchange Rates API"),":"),(0,r.kt)("pre",null,'{\n    "success": true,\n    "historical": true,\n    "date": "2013-12-24",\n    "timestamp": 1387929599,\n    "base": "GBP",\n    ',(0,r.kt)("b",null,'"rates": {'),'\n        "USD": 1.636492,\n        "EUR": 1.196476,\n        "CAD": 1.739516\n    ',(0,r.kt)("b",null,"}"),"\n}"),(0,r.kt)("p",null,"In this case, a record selector of ",(0,r.kt)("inlineCode",{parentName:"p"},"rates")," will yield a single record which contains all the exchange rates in a single object."),(0,r.kt)("h3",{id:"fields-nested-in-arrays"},"Fields nested in arrays"),(0,r.kt)("p",null,"In some cases, records are selected in multiple branches of the response object (for example within each item of an array):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\n{\n  "data": [\n    {\n      "record": {\n        "id": "1"\n      }\n    },\n    {\n      "record": {\n        "id": "2"\n      }\n    }\n  ]\n}\n\n')),(0,r.kt)("p",null,"In this case a record selector with a placeholder ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," selects all children at the current position in the path, in this case ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"record"))," will return the following records:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[\n  {\n    "id": 1\n  },\n  {\n    "id": 2\n  }\n]\n')),(0,r.kt)("h2",{id:"transformations"},"Transformations"),(0,r.kt)("p",null,"It is recommended to not change records during the extraction process the connector is performing, but instead load them into the downstream warehouse unchanged and perform necessary transformations there in order to stay flexible in what data is required. However there are some reasons that require the modifying the fields of records before they are sent to the warehouse:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove personally identifiable information (PII) to ensure compliance with local legislation"),(0,r.kt)("li",{parentName:"ul"},"Pseudonymise sensitive fields"),(0,r.kt)("li",{parentName:"ul"},"Remove large fields that don't contain interesting information and significantly increase load on the system")),(0,r.kt)("p",null,'The "transformations" feature can be used for these purposes.'),(0,r.kt)("h3",{id:"removing-fields"},"Removing fields"),(0,r.kt)("iframe",{width:"640",height:"538",src:"https://www.loom.com/embed/8dca8feaa54f49848667d3fd5b945372",frameborder:"0",webkitallowfullscreen:!0,mozallowfullscreen:!0,allowfullscreen:!0}),(0,r.kt)("p",null,'To remove a field from a record, add a new transformation in the "Transformations" section of type "remove" and enter the field path. For example in case of the ',(0,r.kt)("a",{parentName:"p",href:"https://emailoctopus.com/api-documentation/campaigns/get-all"},"EmailOctopus API"),", the campaigns records also include the html content of the mailing which takes up a lot of space:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "data": [\n        {\n            "id": "00000000-0000-0000-0000-000000000000",\n            "status": "SENT",\n            "name": "Foo",\n            "subject": "Bar",\n            "from": {\n                "name": "John Doe",\n                "email_address": "john.doe@gmail.com"\n            },\n            "content": {\n                "html": "<html>lots of text here...<html>",\n                "plain_text": "Lots of plain text here...."\n            },\n            "created_at": "2023-04-13T15:28:37+00:00",\n            "sent_at": "2023-04-14T15:28:37+00:00"\n        },\n    ]\n}\n')),(0,r.kt)("p",null,'Setting the "Path" of the remove-transformation to ',(0,r.kt)("inlineCode",{parentName:"p"},"content")," removes these fields from the records:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "id": "00000000-0000-0000-0000-000000000000",\n    "status": "SENT",\n    "from": {\n        "name": "John Doe",\n        "email_address": "john.doe@gmail.com"\n    },\n    "name": "Foo",\n    "subject": "Bar",\n    "created_at": "2023-04-13T15:28:37+00:00",\n    "sent_at": "2023-04-14T15:28:37+00:00"\n}\n')),(0,r.kt)("p",null,"Like in case of the record selector, properties of deeply nested objects can be removed as well by specifying the path of properties to the target field that should be removed."),(0,r.kt)("h3",{id:"removing-fields-that-match-a-glob-pattern"},"Removing fields that match a glob pattern"),(0,r.kt)("p",null,"Imagine that regardless of which level a properties appears, it should be removed from the data. This can be achieved by adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"**"),' to the "Path" - for example "',(0,r.kt)("inlineCode",{parentName:"p"},"**"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),'" will remove all "name" fields anywhere in the record:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "id": "00000000-0000-0000-0000-000000000000",\n    "status": "SENT",\n    "from": {\n        "email_address": "john.doe@gmail.com"\n    },\n    "subject": "Bar",\n    "created_at": "2023-04-13T15:28:37+00:00",\n    "sent_at": "2023-04-14T15:28:37+00:00"\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),' character can also be used as a placeholder to filter for all fields that start with a certain prefix - the "Path" ',(0,r.kt)("inlineCode",{parentName:"p"},"s*")," will remove all fields from the top level that start with the character s:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "id": "00000000-0000-0000-0000-000000000000",\n    "from": {\n        "email_address": "john.doe@gmail.com"\n    },\n    "created_at": "2023-04-13T15:28:37+00:00",\n}\n')),(0,r.kt)("h3",{id:"adding-fields"},"Adding fields"),(0,r.kt)("iframe",{width:"640",height:"409",src:"https://www.loom.com/embed/ab3b72cafb734112b645607ab6d1ab1f",frameborder:"0",webkitallowfullscreen:!0,mozallowfullscreen:!0,allowfullscreen:!0}),(0,r.kt)("p",null,'Adding fields can be used to apply a hashing function to an existing field to pseudonymize it. To do this, add a new transformation in the "Transformations" section of type "add" and enter the field path and the new value. For example in case of the ',(0,r.kt)("a",{parentName:"p",href:"https://emailoctopus.com/api-documentation/campaigns/get-all"},"EmailOctopus API"),", the campaigns records include the name of the sender:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "data": [\n        {\n            "id": "00000000-0000-0000-0000-000000000000",\n            "status": "SENT",\n            "name": "Foo",\n            "subject": "Bar",\n            "from": {\n                "name": "John Doe",\n                "email_address": "john.doe@gmail.com"\n            },\n            "created_at": "2023-04-13T15:28:37+00:00",\n            "sent_at": "2023-04-14T15:28:37+00:00"\n        },\n    ]\n}\n')),(0,r.kt)("p",null,'To apply a hash function to it, set the "Path" to "',(0,r.kt)("inlineCode",{parentName:"p"},"from"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),'" to select the name property nested in the from object and set the value to ',(0,r.kt)("inlineCode",{parentName:"p"},"{{ record['from']['name'] | hash('md5') }}"),". This hashes the name in the record:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "id": "00000000-0000-0000-0000-000000000000",\n    "status": "SENT",\n    "name": "Foo",\n    "subject": "Bar",\n    "from": {\n        "name": "4c2a904bafba06591225113ad17b5cec",\n        "email_address": "john.doe@gmail.com"\n    },\n    "created_at": "2023-04-13T15:28:37+00:00",\n    "sent_at": "2023-04-14T15:28:37+00:00"\n}\n')),(0,r.kt)("p",null,'Another common use case of the "add" transformation is the enriching of records with their parent resource - check out the ',(0,r.kt)("a",{parentName:"p",href:"/connector-development/connector-builder-ui/partitioning#adding-the-partition-value-to-the-record"},"partitioning documentation")," for more details."),(0,r.kt)("p",null,"It's not recommended to use this feature to do projections (like concatenating firstname and lastname into a single \"name\" field) - in most cases it's beneficial to leave these tasks to a later stage in the data pipeline."),(0,r.kt)("h2",{id:"meta-data"},"Meta data"),(0,r.kt)("p",null,"Besides bringing the records in the right shape, it's important to communicate some pieces of meta data about records to the downstream system so they can be handled properly."),(0,r.kt)("h3",{id:"primary-key"},"Primary key"),(0,r.kt)("p",null,'The "Primary key" field specifies how to uniquely identify a record. This is important for downstream de-duplication of records (e.g. by the ',(0,r.kt)("a",{parentName:"p",href:"/understanding-airbyte/connections/incremental-append-deduped"},"incremental sync - Append + Deduped sync mode"),")."),(0,r.kt)("p",null,"In a lot of cases, like for the EmailOctopus example from above, there is a dedicated id field that can be used for this purpose. It's important that the value of the id field is guaranteed to only occur once for a single record."),(0,r.kt)("p",null,"In some cases there is no such field but a combination of multiple fields is guaranteed to be unique, for example the shipping zone locations of the ",(0,r.kt)("a",{parentName:"p",href:"https://woocommerce.github.io/woocommerce-rest-api-docs/#shipping-zone-locations"},"Woocommerce API")," do not have an id, but each combination of the ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," fields is guaranteed to be unique:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[\n  {\n    "code": "BR",\n    "type": "country"\n  },\n  {\n    "code": "DE",\n    "type": "country"\n  },\n]\n')),(0,r.kt)("p",null,'In this case, the "Primary key" can be set to "',(0,r.kt)("inlineCode",{parentName:"p"},"code"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),'" to allow automatic downstream deduplication of records based on the value of these two fields.'),(0,r.kt)("h3",{id:"declared-schema"},"Declared schema"),(0,r.kt)("p",null,'Similar to the "Primary key", the "Declared schema" defines how the records will be shaped via a ',(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSON Schema definition"),". It defines which fields and nested fields occur in the records, whether they are always available or sometimes missing and which types they are."),(0,r.kt)("p",null,"This information is used by the Airbyte system for different purposes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Column selection")," when configuring a connection - in Airbyte cloud, the declared schema allows the user to pick which columns/fields are passed to the destination to dynamically reduce the amount of synced data"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Recreating the data structure with right columns")," in destination - this allows a warehouse destination to create a SQL table which the columns matching the fields of records"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Detecting schema changes")," - if the schema of a stream changes for an existing connection, this situation can be handled gracefully by Airbyte instead of causing errors in the destination")),(0,r.kt)("p",null,'When doing test reads, the connector builder analyzes the test records and shows the derived schema in the "Detected schema" tab. By default, new streams are configured to automatically import the detected schema into the declared schema on every test read.\nThis behavior can be toggled off by disabling the ',(0,r.kt)("inlineCode",{parentName:"p"},"Automatically import declared schema")," switch, in which case the declared schema can be manually edited in the UI and it will no longer be automatically updated when triggering test reads."),(0,r.kt)("p",null,"For example the following test records:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[\n  {\n    "id": "40205efe-5f94-11ed-aa11-7d1ac831a909",\n    "status": "SENT",\n    "subject": "Hello from Integration Test",\n    "created_at": "2022-11-08T18:36:25+00:00",\n    "sent_at": "2022-11-08T18:36:55+00:00"\n  },\n  {\n    "id": "91546616-5ef0-11ed-90c7-fbeacb2ee1eb",\n    "status": "SENT",\n    "subject": "Hello my first campaign",\n    "created_at": "2022-11-07T23:04:44+00:00",\n    "sent_at": "2022-11-08T12:48:27+00:00"\n  }\n]\n')),(0,r.kt)("p",null,"result in the following schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n  "$schema": "http://json-schema.org/schema#",\n  "properties": {\n    "created_at": {\n      "type": "string"\n    },\n    "id": {\n      "type": "string"\n    },\n    "sent_at": {\n      "type": "string"\n    },\n    "status": {\n      "type": "string"\n    },\n    "subject": {\n      "type": "string"\n    }\n  },\n  "type": "object"\n}\n')),(0,r.kt)("p",null,"More strict is always better, but the detected schema is a good default to rely on. See the documentation about ",(0,r.kt)("a",{parentName:"p",href:"https://docs.airbyte.com/understanding-airbyte/supported-data-types/"},"supported data types")," for JSON schema structures that will be picked up by the Airbyte system."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"Automatically import detected schema")," is disabled, and the declared schema deviates from the detected schema, the \"Detected schema\" tab in the testing panel highlights the differences. It's important to note that differences are not necessarily a problem that needs to be fixed - in some cases the currently loaded set of records in the testing panel doesn't feature all possible cases so the detected schema is too strict. However, if the declared schema is incompatible with the detected schema based on the test records, it's very likely there will be errors when running syncs."),(0,r.kt)("img",{src:o,width:"600",alt:"Detected schema with highlighted differences"}),(0,r.kt)("p",null,"In the case of the example above, there are two differences between detected and declared schema. The first difference for the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field is not problematic:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'     "name": {\n-      "type": [\n-        "string",\n-        "null"\n-      ]\n+      "type": "null"\n     },\n')),(0,r.kt)("p",null,"The declared schema allows the ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," value for the name while the detected schema only encountered strings. If it's possible the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is set to null, the detected schema is configured correctly."),(0,r.kt)("p",null,"The second difference will likely cause problems:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'     "subject": {\n-      "type": "number"\n+      "type": "string"\n     }\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"subject")," field was detected as ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", but is configured to be a ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," in the declared schema. As the API returned string subjects during testing, it's likely this will also happen during syncs which would render the declared schema inaccurate. Depending on the situation this can be fixed in multiple ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the API changed and subject is always a string now, the declared schema should be updated to reflect this: ",(0,r.kt)("inlineCode",{parentName:"li"},'"subject": { "type": "string" }')),(0,r.kt)("li",{parentName:"ul"},"If the API is sometimes returning subject as number of string depending on the record, the declared schema should be updated to allow both data types: ",(0,r.kt)("inlineCode",{parentName:"li"},'"subject": { "type": ["string","number"] }'))),(0,r.kt)("p",null,"A common situation is that certain record fields do not have any any values for the test read data, so they are set to ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),". In the detected schema, these field are of type ",(0,r.kt)("inlineCode",{parentName:"p"},'"null"')," which is most likely not correct for all cases. In these situations, the declared schema should be manually corrected."))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=c(n),m=r,u=h["".concat(l,".").concat(m)]||h[m]||p[m]||o;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);