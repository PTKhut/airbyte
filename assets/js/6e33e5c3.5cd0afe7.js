"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[10723],{9024:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={},l="Typing and Deduping",o={unversionedId:"understanding-airbyte/typing-deduping",id:"understanding-airbyte/typing-deduping",title:"Typing and Deduping",description:"This page refers to new functionality currently available in early access. Typing and deduping will become the new default method of transforming datasets within data warehouse and database destinations after they've been replicated. This functionality is going live with Destinations V2, which is now in early access for BigQuery.",source:"@site/../docs/understanding-airbyte/typing-deduping.md",sourceDirName:"understanding-airbyte",slug:"/understanding-airbyte/typing-deduping",permalink:"/understanding-airbyte/typing-deduping",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/understanding-airbyte/typing-deduping.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Basic Normalization",permalink:"/understanding-airbyte/basic-normalization"},next:{title:"Connections and Sync Modes",permalink:"/understanding-airbyte/connections/"}},s={},d=[{value:"What is Destinations V2?",id:"what-is-destinations-v2",level:2},{value:"<code>_airbyte_meta</code> Errors",id:"_airbyte_meta-errors",level:2},{value:"Destinations V2 Example",id:"destinations-v2-example",level:2},{value:"Destination Table Name: <em>public.users</em>",id:"destination-table-name-publicusers",level:4},{value:"Destination Table Name: <em>airbyte.raw_public_users</em> (<code>airbyte.{namespace}_{stream}</code>)",id:"destination-table-name-airbyteraw_public_users-airbytenamespace_stream",level:4},{value:"Participating in Early Access",id:"participating-in-early-access",level:2}],u={toc:d},p="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typing-and-deduping"},"Typing and Deduping"),(0,r.kt)("p",null,"This page refers to new functionality currently available in ",(0,r.kt)("strong",{parentName:"p"},"early access"),". Typing and deduping will become the new default method of transforming datasets within data warehouse and database destinations after they've been replicated. This functionality is going live with ",(0,r.kt)("a",{parentName:"p",href:"/release_notes/upgrading_to_destinations_v2/"},"Destinations V2"),", which is now in early access for BigQuery."),(0,r.kt)("p",null,"You will eventually be required to upgrade your connections to use the new destination versions. We are building tools for you to copy your connector\u2019s configuration to a new version to make testing new destinations easier. These will be available in the next few weeks."),(0,r.kt)("h2",{id:"what-is-destinations-v2"},"What is Destinations V2?"),(0,r.kt)("p",null,"At launch, ",(0,r.kt)("a",{parentName:"p",href:"/release_notes/upgrading_to_destinations_v2"},"Airbyte Destinations V2")," will provide:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"One-to-one table mapping: Data in one stream will always be mapped to one table in your data warehouse. No more sub-tables."),(0,r.kt)("li",{parentName:"ul"},"Improved per-row error handling with ",(0,r.kt)("inlineCode",{parentName:"li"},"_airbyte_meta"),": Airbyte will now populate typing errors in the ",(0,r.kt)("inlineCode",{parentName:"li"},"_airbyte_meta")," column instead of failing your sync. You can query these results to audit misformatted or unexpected data."),(0,r.kt)("li",{parentName:"ul"},"Internal Airbyte tables in the ",(0,r.kt)("inlineCode",{parentName:"li"},"airbyte_internal")," schema: Airbyte will now generate all raw tables in the ",(0,r.kt)("inlineCode",{parentName:"li"},"airbyte_internal")," schema. We no longer clutter your desired schema with raw data tables."),(0,r.kt)("li",{parentName:"ul"},"Incremental delivery for large syncs: Data will be incrementally delivered to your final tables when possible. No more waiting hours to see the first rows in your destination table.")),(0,r.kt)("h2",{id:"_airbyte_meta-errors"},(0,r.kt)("inlineCode",{parentName:"h2"},"_airbyte_meta")," Errors"),(0,r.kt)("p",null,'"Per-row error handling" is a new paradigm for Airbyte which provides greater flexibility for our users.  Airbyte now separates ',(0,r.kt)("inlineCode",{parentName:"p"},"data-moving problems")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"data-content problems"),". Prior to Destinations V2, both types of errors were handled the same way: by failing the sync. Now, a failing sync means that Airbyte could not ",(0,r.kt)("em",{parentName:"p"},"move")," all of your data. You can query the ",(0,r.kt)("inlineCode",{parentName:"p"},"_airbyte_meta")," column to see which rows failed for ",(0,r.kt)("em",{parentName:"p"},"content")," reasons, and why. This is a more flexible approach, as you can now decide how to handle rows with errors on a case-by-case basis."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When using data downstream from Airbyte, we generally recommend you only include rows which do not have an error, e.g:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- postgres syntax\nSELECT COUNT(*) FROM _table_ WHERE json_array_length(_airbyte_meta ->> errors) = 0\n"))),(0,r.kt)("p",null,"The types of errors which will be stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"_airbyte_meta.errors")," include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Typing errors"),": the source declared that the type of the column ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," should be an integer, but a string value was returned."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Size errors"),": the source returned content which cannot be stored within this this row or column (e.g. ",(0,r.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/redshift/latest/dg/limitations-super.html"},"a Redshift Super column has a 16mb limit"),").")),(0,r.kt)("p",null,"Depending on your use-case, it may still be valuable to consider rows with errors, especially for aggregations. For example, you may have a table ",(0,r.kt)("inlineCode",{parentName:"p"},"user_reviews"),", and you would like to know the count of new reviews received today. You can choose to include reviews regardless of whether your data warehouse had difficulty storing the full contents of the ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," column. For this use case, ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT COUNT(*) from user_reviews WHERE DATE(created_at) = DATE(NOW())")," is still valid."),(0,r.kt)("h2",{id:"destinations-v2-example"},"Destinations V2 Example"),(0,r.kt)("p",null,"Consider the following ",(0,r.kt)("a",{parentName:"p",href:"https://docs.airbyte.com/integrations/sources/faker"},"source schema")," for stream ",(0,r.kt)("inlineCode",{parentName:"p"},"users"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "number",\n  "first_name": "string",\n  "age": "number",\n  "address": {\n    "city": "string",\n    "zip": "string"\n  }\n}\n')),(0,r.kt)("p",null,"The data from one stream will now be mapped to one table in your schema as below:"),(0,r.kt)("h4",{id:"destination-table-name-publicusers"},"Destination Table Name: ",(0,r.kt)("em",{parentName:"h4"},"public.users")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"(note, not in actual table)")),(0,r.kt)("th",{parentName:"tr",align:null},"_","airbyte_raw_id"),(0,r.kt)("th",{parentName:"tr",align:null},"_","airbyte_extracted_at"),(0,r.kt)("th",{parentName:"tr",align:null},"_","airbyte_meta"),(0,r.kt)("th",{parentName:"tr",align:null},"id"),(0,r.kt)("th",{parentName:"tr",align:null},"first_name"),(0,r.kt)("th",{parentName:"tr",align:null},"age"),(0,r.kt)("th",{parentName:"tr",align:null},"address"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Successful typing and de-duping \u27f6"),(0,r.kt)("td",{parentName:"tr",align:null},"xxx-xxx-xxx"),(0,r.kt)("td",{parentName:"tr",align:null},"2022-01-01 12:00:00"),(0,r.kt)("td",{parentName:"tr",align:null},"{}"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"sarah"),(0,r.kt)("td",{parentName:"tr",align:null},"39"),(0,r.kt)("td",{parentName:"tr",align:null},"{ city: \u201cSan Francisco\u201d, zip: \u201c94131\u201d }")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Failed typing that didn\u2019t break other rows \u27f6"),(0,r.kt)("td",{parentName:"tr",align:null},"yyy-yyy-yyy"),(0,r.kt)("td",{parentName:"tr",align:null},"2022-01-01 12:00:00"),(0,r.kt)("td",{parentName:"tr",align:null},"{ errors: {","[\u201cfish\u201d is not a valid integer for column \u201cage\u201d]","}"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"evan"),(0,r.kt)("td",{parentName:"tr",align:null},"NULL"),(0,r.kt)("td",{parentName:"tr",align:null},"{ city: \u201cMenlo Park\u201d, zip: \u201c94002\u201d }")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Not-yet-typed \u27f6"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,"In legacy normalization, columns of ",(0,r.kt)("a",{parentName:"p",href:"https://docs.airbyte.com/understanding-airbyte/supported-data-types/#the-types"},"Airbyte type")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Object"),' in the Destination were "unnested" into separate tables. In this example, with Destinations V2, the previously unnested ',(0,r.kt)("inlineCode",{parentName:"p"},"public.users_address")," table with columns ",(0,r.kt)("inlineCode",{parentName:"p"},"city")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"zip")," will no longer be generated."),(0,r.kt)("h4",{id:"destination-table-name-airbyteraw_public_users-airbytenamespace_stream"},"Destination Table Name: ",(0,r.kt)("em",{parentName:"h4"},"airbyte.raw_public_users")," (",(0,r.kt)("inlineCode",{parentName:"h4"},"airbyte.{namespace}_{stream}"),")"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"(note, not in actual table)")),(0,r.kt)("th",{parentName:"tr",align:null},"_","airbyte_raw_id"),(0,r.kt)("th",{parentName:"tr",align:null},"_","airbyte_data\ufeff"),(0,r.kt)("th",{parentName:"tr",align:null},"_","airbyte_loaded_at"),(0,r.kt)("th",{parentName:"tr",align:null},"_","airbyte_extracted_at"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Successful typing and de-duping \u27f6"),(0,r.kt)("td",{parentName:"tr",align:null},"xxx-xxx-xxx"),(0,r.kt)("td",{parentName:"tr",align:null},"{ id: 1, first_name: \u201csarah\u201d, age: 39, address: { city: \u201cSan Francisco\u201d, zip: \u201c94131\u201d } }"),(0,r.kt)("td",{parentName:"tr",align:null},"2022-01-01 12:00:001"),(0,r.kt)("td",{parentName:"tr",align:null},"2022-01-01 12:00:00\ufeff")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Failed typing that didn\u2019t break other rows \u27f6"),(0,r.kt)("td",{parentName:"tr",align:null},"yyy-yyy-yyy"),(0,r.kt)("td",{parentName:"tr",align:null},"{ id: 2, first_name: \u201cevan\u201d, age: \u201cfish\u201d, address: { city: \u201cMenlo Park\u201d, zip: \u201c94002\u201d } }"),(0,r.kt)("td",{parentName:"tr",align:null},"2022-01-01 12:00:001"),(0,r.kt)("td",{parentName:"tr",align:null},"2022-01-01 12:00:00\ufeff")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Not-yet-typed \u27f6"),(0,r.kt)("td",{parentName:"tr",align:null},"zzz-zzz-zzz"),(0,r.kt)("td",{parentName:"tr",align:null},"{ id: 3, first_name: \u201cedward\u201d, age: 35, address: { city: \u201cSunnyvale\u201d, zip: \u201c94003\u201d } }"),(0,r.kt)("td",{parentName:"tr",align:null},"NULL"),(0,r.kt)("td",{parentName:"tr",align:null},"2022-01-01 13:00:00\ufeff")))),(0,r.kt)("p",null,"You also now see the following changes in Airbyte-provided columns:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Airbyte Destinations V2 Column Changes",src:n(44843).Z,width:"2112",height:"604"})),(0,r.kt)("h2",{id:"participating-in-early-access"},"Participating in Early Access"),(0,r.kt)("p",null,"You can start using Destinations V2 for BigQuery or Snowflake in early access by following the below instructions:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Upgrade your Destination"),": If you are using Airbyte Open Source, update your destination version to the latest version. If you are a Cloud customer, this step will already be completed on your behalf."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Enabling Destinations V2"),": Create a new destination, and enable the Destinations V2 option under ",(0,r.kt)("inlineCode",{parentName:"li"},"Advanced")," settings. You will need your data warehouse credentials for this step. For this early release, we ask that you enable Destinations V2 on a new destination using new connections. When Destinations V2 is fully available, there will be additional migration paths for upgrading your destination without resetting any of your existing connections.",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"If your previous BigQuery destination is using \u201cGCS Staging\u201d, you can reuse the same staging bucket."),(0,r.kt)("li",{parentName:"ol"},"Do not enable Destinations V2 on your previous / existing destinations during early release. It will cause your existing connections to fail."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Create a New Connection"),": Create connections using the new BigQuery destination. These will automatically use Destinations V2.",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"If your new destination has the same default namespace, you may want to add a stream prefix to avoid collisions in the final tables."),(0,r.kt)("li",{parentName:"ol"},"Do not modify the \u2018Transformation\u2019 settings. These will be ignored."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Monitor your Sync"),": Wait at least 20 minutes, or until your sync is complete. Verify the data in your destination is correct. Congratulations, you have successfully upgraded your connection to Destinations V2!")),(0,r.kt)("p",null,"Once you\u2019ve completed the setup for Destinations V2, we ask that you pay special attention to the data delivered in your destination. Let us know immediately if you see any unexpected data: table and column name changes, missing columns, or columns with incorrect types."))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(n),c=r,y=p["".concat(s,".").concat(c)]||p[c]||m[c]||i;return n?a.createElement(y,l(l({ref:t},u),{},{components:n})):a.createElement(y,l({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},44843:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/destinations-v2-column-changes-27431401480ec03f5dee0374d0216b6f.png"}}]);