"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[72491],{95462:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const c={},a="Testing Connectors",s={unversionedId:"connector-development/testing-connectors/README",id:"connector-development/testing-connectors/README",title:"Testing Connectors",description:"Our testing pyramid",source:"@site/../docs/connector-development/testing-connectors/README.md",sourceDirName:"connector-development/testing-connectors",slug:"/connector-development/testing-connectors/",permalink:"/connector-development/testing-connectors/",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/testing-connectors/README.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Stream Slices",permalink:"/connector-development/cdk-python/stream-slices"},next:{title:"Acceptance Tests Reference",permalink:"/connector-development/testing-connectors/connector-acceptance-tests-reference"}},i={},l=[{value:"Our testing pyramid",id:"our-testing-pyramid",level:2},{value:"Running tests",id:"running-tests",level:2},{value:"Tests on pull requests",id:"tests-on-pull-requests",level:2}],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing-connectors"},"Testing Connectors"),(0,o.kt)("h2",{id:"our-testing-pyramid"},"Our testing pyramid"),(0,o.kt)("p",null,"Multiple tests suites compose the Airbyte connector testing pyramid:\nConnector specific tests declared in the connector code directory:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Unit tests"),(0,o.kt)("li",{parentName:"ul"},"Integration tests")),(0,o.kt)("p",null,"Tests common to all connectors:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/airbytehq/airbyte/blob/master/airbyte-ci/connectors/connector_ops/ci_connector_ops/qa_checks.py#L1"},"QA checks")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.airbyte.com/connector-development/testing-connectors/connector-acceptance-tests-reference/"},"Connector Acceptance tests"))),(0,o.kt)("h2",{id:"running-tests"},"Running tests"),(0,o.kt)("p",null,"Unit and integration tests can be run directly from the connector code."),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"pytest")," for Python connectors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"python -m pytest unit_tests/\npython -m pytest integration_tests/\n")),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"gradle")," for Java connectors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew :airbyte-integrations:connectors:source-postgres:test\n./gradlew :airbyte-integrations:connectors:source-postgres:integrationTestJava\n")),(0,o.kt)("p",null,"Please note that according to the test implementation you might have to provide connector configurations as a ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," file in a ",(0,o.kt)("inlineCode",{parentName:"p"},".secrets")," folder in the connector code directory."),(0,o.kt)("p",null,"If you want to run the global test suite, exactly like what is run in CI, you should install ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte/blob/master/airbyte-ci/connectors/pipelines/README.md"},(0,o.kt)("inlineCode",{parentName:"a"},"airbyte-ci")," CLI")," and use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"airbyte-ci connectors --name=<connector_name> test\n")),(0,o.kt)("p",null,"This will run all the tests for the connector, including the QA checks and the Connector Acceptance tests.\nConnector Acceptance tests require connector configuration to be provided as a ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," file in a ",(0,o.kt)("inlineCode",{parentName:"p"},".secrets")," folder in the connector code directory."),(0,o.kt)("h2",{id:"tests-on-pull-requests"},"Tests on pull requests"),(0,o.kt)("p",null,"Our CI infrastructure runs the connector tests with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte/blob/master/airbyte-ci/connectors/pipelines/README.md"},(0,o.kt)("inlineCode",{parentName:"a"},"airbyte-ci")," CLI"),". Connectors tests are automatically and remotely triggered on your branch according to the changes made in your branch.\n",(0,o.kt)("strong",{parentName:"p"},"Passing tests are required to merge a connector pull request.")))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,g=u["".concat(i,".").concat(d)]||u[d]||m[d]||c;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<c;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);